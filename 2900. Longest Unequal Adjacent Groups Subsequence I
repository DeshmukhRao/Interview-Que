class Solution {
public:
    vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = groups.size();
        vector<int> dp(n, 1), pr(n, -1);
        
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (groups[i] != groups[j]) {
                    
                    if (dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        pr[i] = j;
                    }
                    
                } 
            }
        }
        
        int mx = 0, mi = -1;
        for (int i = 0; i < n; ++i) {
            if (mx < dp[i]) {
                mx = dp[i];
                mi = i;
            }
        }
        vector<string> ans;
        
        while (mi != -1) {
            ans.push_back(words[mi]);
            mi = pr[mi];
        }
        reverse(ans.begin(), ans.end());
        return ans;
        
    }
};