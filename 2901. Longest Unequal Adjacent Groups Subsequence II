
class Solution {
public:
    vector<string> getWordsInLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = words.size();
        vector<int> t(n, 1);
        vector<int> prev_idx(n, -1);
        int last_chosen_index = 0;
        int maxL = 1;

        auto hammingDistance = [](const string &a, const string &b) {
            int dist = 0;
            for(int i = 0; i < a.size(); ++i) {
                if(a[i] != b[i]) ++dist;
            }
            return dist;
        };

        for(int i = 1; i < n; ++i) {
            for(int j = 0; j < i; ++j) {
                if(groups[i] != groups[j] && words[i].length() == words[j].length() && hammingDistance(words[i], words[j]) == 1) {
                    if(t[i] < t[j] + 1) {
                        t[i] = t[j] + 1;
                        prev_idx[i] = j;
                    }
                }
            }
            if(t[i] > maxL) {
                maxL = t[i];
                last_chosen_index = i;
            }
        }

        vector<string> result;
        while(last_chosen_index >= 0) {
            result.push_back(words[last_chosen_index]);
            last_chosen_index = prev_idx[last_chosen_index];
        }

        reverse(result.begin(), result.end());  // Reverse to get the correct order
        return result;
    }
};
