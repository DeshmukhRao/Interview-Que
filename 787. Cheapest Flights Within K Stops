class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int>prices(n,1e9);
        vector<vector<pair<int,int>>>adj(n);
        queue<pair<int,pair<int,int>>>q;

        for(vector<int> &v : flights)
        {
            adj[v[0]].push_back({v[1],v[2]});

            q.push({src,{0,0}});
            prices[src]= 0;
        }

        while(!q.empty())
        {
            int curr= q.front().first;
            int currprice = q.front().second.first;
            int moves = q.front().second.second;

            q.pop();

            if(moves>k) continue;

            for(pair<int,int>&p : adj[curr])
            {
                if(prices[p.first]<= currprice + p.second)
                continue;

                q.push({p.first,{currprice+p.second, moves+1}});

                prices[p.first]= currprice + p.second;

            }
        }

        return prices[dst] == 1e9 ? -1: prices[dst];
    }
};