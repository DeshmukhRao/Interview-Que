class Solution {
public:
    int mod = 1e9 + 7;
    int dp[1001][1001];

    int dfs(vector<vector<int>> &mat, int i, int j, int pre) {
        int n = mat.size(), m = mat[0].size();
        if (i < 0 || j < 0 || i >= n || j >= m || mat[i][j] <= pre)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        
        int l = dfs(mat, i, j - 1, mat[i][j]);
        int r = dfs(mat, i, j + 1, mat[i][j]);
        int u = dfs(mat, i - 1, j, mat[i][j]);
        int d = dfs(mat, i + 1, j, mat[i][j]);
        
        return dp[i][j] = (1 + l + r + u + d) % mod;
    }

    int countPaths(vector<vector<int>>& matrix) {
        int n = matrix.size(), m = matrix[0].size(), ans = 0;
        memset(dp, -1, sizeof(dp));
        
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                ans = (ans + dfs(matrix, i, j, -1)) % mod;

        return ans;
    }
};
